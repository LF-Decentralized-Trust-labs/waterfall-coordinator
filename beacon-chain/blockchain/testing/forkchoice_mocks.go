// // Code generated by MockGen. DO NOT EDIT.
// // Source: beacon-chain/forkchoice/interfaces.go
// //
// // Package mock_forkchoice is a generated GoMock package.
package testing

//
//import (
//	context "context"
//	reflect "reflect"
//
//	gomock "github.com/golang/mock/gomock"
//	types "github.com/prysmaticlabs/eth2-types"
//	types0 "gitlab.waterfall.network/waterfall/protocol/coordinator/beacon-chain/forkchoice/types"
//	eth "gitlab.waterfall.network/waterfall/protocol/coordinator/proto/prysm/v1alpha1"
//	common "gitlab.waterfall.network/waterfall/protocol/gwat/common"
//)
//
//// MockForkChoicer is a mock of ForkChoicer interface.
//type MockForkChoicer struct {
//	ctrl     *gomock.Controller
//	recorder *MockForkChoicerMockRecorder
//}
//
//// MockForkChoicerMockRecorder is the mock recorder for MockForkChoicer.
//type MockForkChoicerMockRecorder struct {
//	mock *MockForkChoicer
//}
//
//// NewMockForkChoicer creates a new mock instance.
//func NewMockForkChoicer(ctrl *gomock.Controller) *MockForkChoicer {
//	mock := &MockForkChoicer{ctrl: ctrl}
//	mock.recorder = &MockForkChoicerMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockForkChoicer) EXPECT() *MockForkChoicerMockRecorder {
//	return m.recorder
//}
//
//// AncestorRoot mocks base method.
//func (m *MockForkChoicer) AncestorRoot(ctx context.Context, root [32]byte, slot types.Slot) ([]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "AncestorRoot", ctx, root, slot)
//	ret0, _ := ret[0].([]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// AncestorRoot indicates an expected call of AncestorRoot.
//func (mr *MockForkChoicerMockRecorder) AncestorRoot(ctx, root, slot interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AncestorRoot", reflect.TypeOf((*MockForkChoicer)(nil).AncestorRoot), ctx, root, slot)
//}
//
//// BoostProposerRoot mocks base method.
//func (m *MockForkChoicer) BoostProposerRoot(ctx context.Context, args *types0.ProposerBoostRootArgs) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "BoostProposerRoot", ctx, args)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// BoostProposerRoot indicates an expected call of BoostProposerRoot.
//func (mr *MockForkChoicerMockRecorder) BoostProposerRoot(ctx, args interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoostProposerRoot", reflect.TypeOf((*MockForkChoicer)(nil).BoostProposerRoot), ctx, args)
//}
//
//// CollectForkExcludedBlkRoots mocks base method.
//func (m *MockForkChoicer) CollectForkExcludedBlkRoots(leaf common.Hash) common.HashArray {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "CollectForkExcludedBlkRoots", leaf)
//	ret0, _ := ret[0].(common.HashArray)
//	return ret0
//}
//
//// CollectForkExcludedBlkRoots indicates an expected call of CollectForkExcludedBlkRoots.
//func (mr *MockForkChoicerMockRecorder) CollectForkExcludedBlkRoots(leaf interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectForkExcludedBlkRoots", reflect.TypeOf((*MockForkChoicer)(nil).CollectForkExcludedBlkRoots), leaf)
//}
//
//// FinalizedEpoch mocks base method.
//func (m *MockForkChoicer) FinalizedEpoch() types.Epoch {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "FinalizedEpoch")
//	ret0, _ := ret[0].(types.Epoch)
//	return ret0
//}
//
//// FinalizedEpoch indicates an expected call of FinalizedEpoch.
//func (mr *MockForkChoicerMockRecorder) FinalizedEpoch() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizedEpoch", reflect.TypeOf((*MockForkChoicer)(nil).FinalizedEpoch))
//}
//
//// ForkChoiceNodes mocks base method.
//func (m *MockForkChoicer) ForkChoiceNodes() []*eth.ForkChoiceNode {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ForkChoiceNodes")
//	ret0, _ := ret[0].([]*eth.ForkChoiceNode)
//	return ret0
//}
//
//// ForkChoiceNodes indicates an expected call of ForkChoiceNodes.
//func (mr *MockForkChoicerMockRecorder) ForkChoiceNodes() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkChoiceNodes", reflect.TypeOf((*MockForkChoicer)(nil).ForkChoiceNodes))
//}
//
//// GetParentByOptimisticSpines mocks base method.
//func (m *MockForkChoicer) GetParentByOptimisticSpines(ctx context.Context, optSpines []common.HashArray, jCpRoot [32]byte) ([32]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetParentByOptimisticSpines", ctx, optSpines, jCpRoot)
//	ret0, _ := ret[0].([32]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetParentByOptimisticSpines indicates an expected call of GetParentByOptimisticSpines.
//func (mr *MockForkChoicerMockRecorder) GetParentByOptimisticSpines(ctx, optSpines, jCpRoot interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentByOptimisticSpines", reflect.TypeOf((*MockForkChoicer)(nil).GetParentByOptimisticSpines), ctx, optSpines, jCpRoot)
//}
//
//// HasNode mocks base method.
//func (m *MockForkChoicer) HasNode(arg0 [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "HasNode", arg0)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// HasNode indicates an expected call of HasNode.
//func (mr *MockForkChoicerMockRecorder) HasNode(arg0 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNode", reflect.TypeOf((*MockForkChoicer)(nil).HasNode), arg0)
//}
//
//// HasParent mocks base method.
//func (m *MockForkChoicer) HasParent(root [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "HasParent", root)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// HasParent indicates an expected call of HasParent.
//func (mr *MockForkChoicerMockRecorder) HasParent(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasParent", reflect.TypeOf((*MockForkChoicer)(nil).HasParent), root)
//}
//
//// Head mocks base method.
//func (m *MockForkChoicer) Head(arg0 context.Context, arg1 types.Epoch, arg2 [32]byte, arg3 []uint64, arg4 types.Epoch) ([32]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Head", arg0, arg1, arg2, arg3, arg4)
//	ret0, _ := ret[0].([32]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// Head indicates an expected call of Head.
//func (mr *MockForkChoicerMockRecorder) Head(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockForkChoicer)(nil).Head), arg0, arg1, arg2, arg3, arg4)
//}
//
//// InsertOptimisticBlock mocks base method.
//func (m *MockForkChoicer) InsertOptimisticBlock(ctx context.Context, slot types.Slot, blockRoot, parentRoot [32]byte, justifiedEpoch, finalizedEpoch types.Epoch, justifiedRoot, finalizedRoot []byte, spineData *eth.SpineData) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "InsertOptimisticBlock", ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// InsertOptimisticBlock indicates an expected call of InsertOptimisticBlock.
//func (mr *MockForkChoicerMockRecorder) InsertOptimisticBlock(ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOptimisticBlock", reflect.TypeOf((*MockForkChoicer)(nil).InsertOptimisticBlock), ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData)
//}
//
//// IsCanonical mocks base method.
//func (m *MockForkChoicer) IsCanonical(root [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "IsCanonical", root)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// IsCanonical indicates an expected call of IsCanonical.
//func (mr *MockForkChoicerMockRecorder) IsCanonical(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCanonical", reflect.TypeOf((*MockForkChoicer)(nil).IsCanonical), root)
//}
//
//// IsOptimistic mocks base method.
//func (m *MockForkChoicer) IsOptimistic(root [32]byte) (bool, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "IsOptimistic", root)
//	ret0, _ := ret[0].(bool)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// IsOptimistic indicates an expected call of IsOptimistic.
//func (mr *MockForkChoicerMockRecorder) IsOptimistic(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOptimistic", reflect.TypeOf((*MockForkChoicer)(nil).IsOptimistic), root)
//}
//
//// JustifiedEpoch mocks base method.
//func (m *MockForkChoicer) JustifiedEpoch() types.Epoch {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "JustifiedEpoch")
//	ret0, _ := ret[0].(types.Epoch)
//	return ret0
//}
//
//// JustifiedEpoch indicates an expected call of JustifiedEpoch.
//func (mr *MockForkChoicerMockRecorder) JustifiedEpoch() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JustifiedEpoch", reflect.TypeOf((*MockForkChoicer)(nil).JustifiedEpoch))
//}
//
//// NodeCount mocks base method.
//func (m *MockForkChoicer) NodeCount() int {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "NodeCount")
//	ret0, _ := ret[0].(int)
//	return ret0
//}
//
//// NodeCount indicates an expected call of NodeCount.
//func (mr *MockForkChoicerMockRecorder) NodeCount() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCount", reflect.TypeOf((*MockForkChoicer)(nil).NodeCount))
//}
//
//// ProcessAttestation mocks base method.
//func (m *MockForkChoicer) ProcessAttestation(arg0 context.Context, arg1 []uint64, arg2 [32]byte, arg3 types.Epoch) {
//	m.ctrl.T.Helper()
//	m.ctrl.Call(m, "ProcessAttestation", arg0, arg1, arg2, arg3)
//}
//
//// ProcessAttestation indicates an expected call of ProcessAttestation.
//func (mr *MockForkChoicerMockRecorder) ProcessAttestation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAttestation", reflect.TypeOf((*MockForkChoicer)(nil).ProcessAttestation), arg0, arg1, arg2, arg3)
//}
//
//// ProposerBoost mocks base method.
//func (m *MockForkChoicer) ProposerBoost() [32]byte {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ProposerBoost")
//	ret0, _ := ret[0].([32]byte)
//	return ret0
//}
//
//// ProposerBoost indicates an expected call of ProposerBoost.
//func (mr *MockForkChoicerMockRecorder) ProposerBoost() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerBoost", reflect.TypeOf((*MockForkChoicer)(nil).ProposerBoost))
//}
//
//// Prune mocks base method.
//func (m *MockForkChoicer) Prune(arg0 context.Context, arg1 [32]byte) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Prune", arg0, arg1)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// Prune indicates an expected call of Prune.
//func (mr *MockForkChoicerMockRecorder) Prune(arg0, arg1 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockForkChoicer)(nil).Prune), arg0, arg1)
//}
//
//// ResetBoostedProposerRoot mocks base method.
//func (m *MockForkChoicer) ResetBoostedProposerRoot(ctx context.Context) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ResetBoostedProposerRoot", ctx)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// ResetBoostedProposerRoot indicates an expected call of ResetBoostedProposerRoot.
//func (mr *MockForkChoicerMockRecorder) ResetBoostedProposerRoot(ctx interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBoostedProposerRoot", reflect.TypeOf((*MockForkChoicer)(nil).ResetBoostedProposerRoot), ctx)
//}
//
//// SetOptimisticToValid mocks base method.
//func (m *MockForkChoicer) SetOptimisticToValid(arg0 context.Context, arg1 [32]byte) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "SetOptimisticToValid", arg0, arg1)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// SetOptimisticToValid indicates an expected call of SetOptimisticToValid.
//func (mr *MockForkChoicerMockRecorder) SetOptimisticToValid(arg0, arg1 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptimisticToValid", reflect.TypeOf((*MockForkChoicer)(nil).SetOptimisticToValid), arg0, arg1)
//}
//
//// Tips mocks base method.
//func (m *MockForkChoicer) Tips() ([][32]byte, []types.Slot) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Tips")
//	ret0, _ := ret[0].([][32]byte)
//	ret1, _ := ret[1].([]types.Slot)
//	return ret0, ret1
//}
//
//// Tips indicates an expected call of Tips.
//func (mr *MockForkChoicerMockRecorder) Tips() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tips", reflect.TypeOf((*MockForkChoicer)(nil).Tips))
//}
//
//// MockHeadRetriever is a mock of HeadRetriever interface.
//type MockHeadRetriever struct {
//	ctrl     *gomock.Controller
//	recorder *MockHeadRetrieverMockRecorder
//}
//
//// MockHeadRetrieverMockRecorder is the mock recorder for MockHeadRetriever.
//type MockHeadRetrieverMockRecorder struct {
//	mock *MockHeadRetriever
//}
//
//// NewMockHeadRetriever creates a new mock instance.
//func NewMockHeadRetriever(ctrl *gomock.Controller) *MockHeadRetriever {
//	mock := &MockHeadRetriever{ctrl: ctrl}
//	mock.recorder = &MockHeadRetrieverMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockHeadRetriever) EXPECT() *MockHeadRetrieverMockRecorder {
//	return m.recorder
//}
//
//// Head mocks base method.
//func (m *MockHeadRetriever) Head(arg0 context.Context, arg1 types.Epoch, arg2 [32]byte, arg3 []uint64, arg4 types.Epoch) ([32]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Head", arg0, arg1, arg2, arg3, arg4)
//	ret0, _ := ret[0].([32]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// Head indicates an expected call of Head.
//func (mr *MockHeadRetrieverMockRecorder) Head(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHeadRetriever)(nil).Head), arg0, arg1, arg2, arg3, arg4)
//}
//
//// IsOptimistic mocks base method.
//func (m *MockHeadRetriever) IsOptimistic(root [32]byte) (bool, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "IsOptimistic", root)
//	ret0, _ := ret[0].(bool)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// IsOptimistic indicates an expected call of IsOptimistic.
//func (mr *MockHeadRetrieverMockRecorder) IsOptimistic(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOptimistic", reflect.TypeOf((*MockHeadRetriever)(nil).IsOptimistic), root)
//}
//
//// Tips mocks base method.
//func (m *MockHeadRetriever) Tips() ([][32]byte, []types.Slot) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Tips")
//	ret0, _ := ret[0].([][32]byte)
//	ret1, _ := ret[1].([]types.Slot)
//	return ret0, ret1
//}
//
//// Tips indicates an expected call of Tips.
//func (mr *MockHeadRetrieverMockRecorder) Tips() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tips", reflect.TypeOf((*MockHeadRetriever)(nil).Tips))
//}
//
//// MockBlockProcessor is a mock of BlockProcessor interface.
//type MockBlockProcessor struct {
//	ctrl     *gomock.Controller
//	recorder *MockBlockProcessorMockRecorder
//}
//
//// MockBlockProcessorMockRecorder is the mock recorder for MockBlockProcessor.
//type MockBlockProcessorMockRecorder struct {
//	mock *MockBlockProcessor
//}
//
//// NewMockBlockProcessor creates a new mock instance.
//func NewMockBlockProcessor(ctrl *gomock.Controller) *MockBlockProcessor {
//	mock := &MockBlockProcessor{ctrl: ctrl}
//	mock.recorder = &MockBlockProcessorMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockBlockProcessor) EXPECT() *MockBlockProcessorMockRecorder {
//	return m.recorder
//}
//
//// InsertOptimisticBlock mocks base method.
//func (m *MockBlockProcessor) InsertOptimisticBlock(ctx context.Context, slot types.Slot, blockRoot, parentRoot [32]byte, justifiedEpoch, finalizedEpoch types.Epoch, justifiedRoot, finalizedRoot []byte, spineData *eth.SpineData) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "InsertOptimisticBlock", ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// InsertOptimisticBlock indicates an expected call of InsertOptimisticBlock.
//func (mr *MockBlockProcessorMockRecorder) InsertOptimisticBlock(ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOptimisticBlock", reflect.TypeOf((*MockBlockProcessor)(nil).InsertOptimisticBlock), ctx, slot, blockRoot, parentRoot, justifiedEpoch, finalizedEpoch, justifiedRoot, finalizedRoot, spineData)
//}
//
//// MockAttestationProcessor is a mock of AttestationProcessor interface.
//type MockAttestationProcessor struct {
//	ctrl     *gomock.Controller
//	recorder *MockAttestationProcessorMockRecorder
//}
//
//// MockAttestationProcessorMockRecorder is the mock recorder for MockAttestationProcessor.
//type MockAttestationProcessorMockRecorder struct {
//	mock *MockAttestationProcessor
//}
//
//// NewMockAttestationProcessor creates a new mock instance.
//func NewMockAttestationProcessor(ctrl *gomock.Controller) *MockAttestationProcessor {
//	mock := &MockAttestationProcessor{ctrl: ctrl}
//	mock.recorder = &MockAttestationProcessorMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockAttestationProcessor) EXPECT() *MockAttestationProcessorMockRecorder {
//	return m.recorder
//}
//
//// ProcessAttestation mocks base method.
//func (m *MockAttestationProcessor) ProcessAttestation(arg0 context.Context, arg1 []uint64, arg2 [32]byte, arg3 types.Epoch) {
//	m.ctrl.T.Helper()
//	m.ctrl.Call(m, "ProcessAttestation", arg0, arg1, arg2, arg3)
//}
//
//// ProcessAttestation indicates an expected call of ProcessAttestation.
//func (mr *MockAttestationProcessorMockRecorder) ProcessAttestation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAttestation", reflect.TypeOf((*MockAttestationProcessor)(nil).ProcessAttestation), arg0, arg1, arg2, arg3)
//}
//
//// MockPruner is a mock of Pruner interface.
//type MockPruner struct {
//	ctrl     *gomock.Controller
//	recorder *MockPrunerMockRecorder
//}
//
//// MockPrunerMockRecorder is the mock recorder for MockPruner.
//type MockPrunerMockRecorder struct {
//	mock *MockPruner
//}
//
//// NewMockPruner creates a new mock instance.
//func NewMockPruner(ctrl *gomock.Controller) *MockPruner {
//	mock := &MockPruner{ctrl: ctrl}
//	mock.recorder = &MockPrunerMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockPruner) EXPECT() *MockPrunerMockRecorder {
//	return m.recorder
//}
//
//// Prune mocks base method.
//func (m *MockPruner) Prune(arg0 context.Context, arg1 [32]byte) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "Prune", arg0, arg1)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// Prune indicates an expected call of Prune.
//func (mr *MockPrunerMockRecorder) Prune(arg0, arg1 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockPruner)(nil).Prune), arg0, arg1)
//}
//
//// MockProposerBooster is a mock of ProposerBooster interface.
//type MockProposerBooster struct {
//	ctrl     *gomock.Controller
//	recorder *MockProposerBoosterMockRecorder
//}
//
//// MockProposerBoosterMockRecorder is the mock recorder for MockProposerBooster.
//type MockProposerBoosterMockRecorder struct {
//	mock *MockProposerBooster
//}
//
//// NewMockProposerBooster creates a new mock instance.
//func NewMockProposerBooster(ctrl *gomock.Controller) *MockProposerBooster {
//	mock := &MockProposerBooster{ctrl: ctrl}
//	mock.recorder = &MockProposerBoosterMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockProposerBooster) EXPECT() *MockProposerBoosterMockRecorder {
//	return m.recorder
//}
//
//// BoostProposerRoot mocks base method.
//func (m *MockProposerBooster) BoostProposerRoot(ctx context.Context, args *types0.ProposerBoostRootArgs) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "BoostProposerRoot", ctx, args)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// BoostProposerRoot indicates an expected call of BoostProposerRoot.
//func (mr *MockProposerBoosterMockRecorder) BoostProposerRoot(ctx, args interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoostProposerRoot", reflect.TypeOf((*MockProposerBooster)(nil).BoostProposerRoot), ctx, args)
//}
//
//// ResetBoostedProposerRoot mocks base method.
//func (m *MockProposerBooster) ResetBoostedProposerRoot(ctx context.Context) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ResetBoostedProposerRoot", ctx)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// ResetBoostedProposerRoot indicates an expected call of ResetBoostedProposerRoot.
//func (mr *MockProposerBoosterMockRecorder) ResetBoostedProposerRoot(ctx interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBoostedProposerRoot", reflect.TypeOf((*MockProposerBooster)(nil).ResetBoostedProposerRoot), ctx)
//}
//
//// MockGetter is a mock of Getter interface.
//type MockGetter struct {
//	ctrl     *gomock.Controller
//	recorder *MockGetterMockRecorder
//}
//
//// MockGetterMockRecorder is the mock recorder for MockGetter.
//type MockGetterMockRecorder struct {
//	mock *MockGetter
//}
//
//// NewMockGetter creates a new mock instance.
//func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
//	mock := &MockGetter{ctrl: ctrl}
//	mock.recorder = &MockGetterMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
//	return m.recorder
//}
//
//// AncestorRoot mocks base method.
//func (m *MockGetter) AncestorRoot(ctx context.Context, root [32]byte, slot types.Slot) ([]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "AncestorRoot", ctx, root, slot)
//	ret0, _ := ret[0].([]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// AncestorRoot indicates an expected call of AncestorRoot.
//func (mr *MockGetterMockRecorder) AncestorRoot(ctx, root, slot interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AncestorRoot", reflect.TypeOf((*MockGetter)(nil).AncestorRoot), ctx, root, slot)
//}
//
//// CollectForkExcludedBlkRoots mocks base method.
//func (m *MockGetter) CollectForkExcludedBlkRoots(leaf common.Hash) common.HashArray {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "CollectForkExcludedBlkRoots", leaf)
//	ret0, _ := ret[0].(common.HashArray)
//	return ret0
//}
//
//// CollectForkExcludedBlkRoots indicates an expected call of CollectForkExcludedBlkRoots.
//func (mr *MockGetterMockRecorder) CollectForkExcludedBlkRoots(leaf interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectForkExcludedBlkRoots", reflect.TypeOf((*MockGetter)(nil).CollectForkExcludedBlkRoots), leaf)
//}
//
//// FinalizedEpoch mocks base method.
//func (m *MockGetter) FinalizedEpoch() types.Epoch {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "FinalizedEpoch")
//	ret0, _ := ret[0].(types.Epoch)
//	return ret0
//}
//
//// FinalizedEpoch indicates an expected call of FinalizedEpoch.
//func (mr *MockGetterMockRecorder) FinalizedEpoch() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizedEpoch", reflect.TypeOf((*MockGetter)(nil).FinalizedEpoch))
//}
//
//// ForkChoiceNodes mocks base method.
//func (m *MockGetter) ForkChoiceNodes() []*eth.ForkChoiceNode {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ForkChoiceNodes")
//	ret0, _ := ret[0].([]*eth.ForkChoiceNode)
//	return ret0
//}
//
//// ForkChoiceNodes indicates an expected call of ForkChoiceNodes.
//func (mr *MockGetterMockRecorder) ForkChoiceNodes() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkChoiceNodes", reflect.TypeOf((*MockGetter)(nil).ForkChoiceNodes))
//}
//
//// GetParentByOptimisticSpines mocks base method.
//func (m *MockGetter) GetParentByOptimisticSpines(ctx context.Context, optSpines []common.HashArray, jCpRoot [32]byte) ([32]byte, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetParentByOptimisticSpines", ctx, optSpines, jCpRoot)
//	ret0, _ := ret[0].([32]byte)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetParentByOptimisticSpines indicates an expected call of GetParentByOptimisticSpines.
//func (mr *MockGetterMockRecorder) GetParentByOptimisticSpines(ctx, optSpines, jCpRoot interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentByOptimisticSpines", reflect.TypeOf((*MockGetter)(nil).GetParentByOptimisticSpines), ctx, optSpines, jCpRoot)
//}
//
//// HasNode mocks base method.
//func (m *MockGetter) HasNode(arg0 [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "HasNode", arg0)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// HasNode indicates an expected call of HasNode.
//func (mr *MockGetterMockRecorder) HasNode(arg0 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNode", reflect.TypeOf((*MockGetter)(nil).HasNode), arg0)
//}
//
//// HasParent mocks base method.
//func (m *MockGetter) HasParent(root [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "HasParent", root)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// HasParent indicates an expected call of HasParent.
//func (mr *MockGetterMockRecorder) HasParent(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasParent", reflect.TypeOf((*MockGetter)(nil).HasParent), root)
//}
//
//// IsCanonical mocks base method.
//func (m *MockGetter) IsCanonical(root [32]byte) bool {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "IsCanonical", root)
//	ret0, _ := ret[0].(bool)
//	return ret0
//}
//
//// IsCanonical indicates an expected call of IsCanonical.
//func (mr *MockGetterMockRecorder) IsCanonical(root interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCanonical", reflect.TypeOf((*MockGetter)(nil).IsCanonical), root)
//}
//
//// JustifiedEpoch mocks base method.
//func (m *MockGetter) JustifiedEpoch() types.Epoch {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "JustifiedEpoch")
//	ret0, _ := ret[0].(types.Epoch)
//	return ret0
//}
//
//// JustifiedEpoch indicates an expected call of JustifiedEpoch.
//func (mr *MockGetterMockRecorder) JustifiedEpoch() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JustifiedEpoch", reflect.TypeOf((*MockGetter)(nil).JustifiedEpoch))
//}
//
//// NodeCount mocks base method.
//func (m *MockGetter) NodeCount() int {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "NodeCount")
//	ret0, _ := ret[0].(int)
//	return ret0
//}
//
//// NodeCount indicates an expected call of NodeCount.
//func (mr *MockGetterMockRecorder) NodeCount() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCount", reflect.TypeOf((*MockGetter)(nil).NodeCount))
//}
//
//// ProposerBoost mocks base method.
//func (m *MockGetter) ProposerBoost() [32]byte {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ProposerBoost")
//	ret0, _ := ret[0].([32]byte)
//	return ret0
//}
//
//// ProposerBoost indicates an expected call of ProposerBoost.
//func (mr *MockGetterMockRecorder) ProposerBoost() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerBoost", reflect.TypeOf((*MockGetter)(nil).ProposerBoost))
//}
//
//// MockSetter is a mock of Setter interface.
//type MockSetter struct {
//	ctrl     *gomock.Controller
//	recorder *MockSetterMockRecorder
//}
//
//// MockSetterMockRecorder is the mock recorder for MockSetter.
//type MockSetterMockRecorder struct {
//	mock *MockSetter
//}
//
//// NewMockSetter creates a new mock instance.
//func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
//	mock := &MockSetter{ctrl: ctrl}
//	mock.recorder = &MockSetterMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
//	return m.recorder
//}
//
//// SetOptimisticToValid mocks base method.
//func (m *MockSetter) SetOptimisticToValid(arg0 context.Context, arg1 [32]byte) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "SetOptimisticToValid", arg0, arg1)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// SetOptimisticToValid indicates an expected call of SetOptimisticToValid.
//func (mr *MockSetterMockRecorder) SetOptimisticToValid(arg0, arg1 interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptimisticToValid", reflect.TypeOf((*MockSetter)(nil).SetOptimisticToValid), arg0, arg1)
//}
